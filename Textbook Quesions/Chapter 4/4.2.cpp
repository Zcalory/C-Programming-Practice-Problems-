//4.2
//Question: Putting 10 different 2-digit integrals generated by a random number function into an 1-dimension array and then output those prime number of them.

#include<iostream>
#include<ctime>
#include <time.h> 
using namespace std;
//random numbers generate function
int rk(int k){
	if(k>0)
		return ((25173*rk(k-1)+13849)%100);
	else return (rand()%100);
}

int main(){
	int a[10],tem,num=0;
	bool flag=false;
	for(int i=0;i<10;i++)
	{
		while(1){
			
			srand (time(NULL));
			//num is parameter that make sure the random number is different each time running this program.
			tem=rk(num++);
			//Make sure that the number is a 2-digit integral.
			if(tem>=10&&tem<=99){
				if(i==0) {a[i]=tem;cout<<"a["<<i<<"]="<<a[i]<<endl;break;}
				else
				{
					for(int j=i-1;j>=0;j--){
						//set flag true if there's a number in the array equals the new number.
						if (tem==a[j]) flag=true;
					}
					if(flag==false){
						//This number is vaild and set a[i].
						{a[i]=tem;cout<<"a["<<i<<"]="<<a[i]<<endl;break;}
					}
					else
						//This number is invaild, do it again. 
						flag=false;
				}
			} 
		}
	}
	cout<<"Prime number(s):";
	for(int i=0,j=2;i<10;i++,j=2){
		while(1){
			if(j>sqrt(a[i])) {cout<<a[i]<<"\t"; break;}
		else if(a[i]%j!=0)
			j++;
		else
			break;
		}
	}
	cout<<endl;
	system("pause");
}
